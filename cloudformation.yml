AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range for the VPC
    Type: String
    Default: 10.10.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range for the public subnet in the first Availability Zone
    Type: String
    Default: 10.10.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range for the public subnet in the second Availability Zone
    Type: String
    Default: 10.10.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability Zone
    Type: String
    Default: 10.10.10.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range for the private subnet in the second Availability Zone
    Type: String
    Default: 10.10.20.0/24

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
  InstanceType:
    Description: EC2 DAPS instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m6i.large
      - m6i.xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  CertificateARN:
    Description: the SSL certificate ARN to attach to the ALB
    Type: String

  DNSName:
    Description: the DNS name of the your DAPS server
    Type: String  

  PerformanceMode:
    Type: String
    Default: generalPurpose
    AllowedValues:
    - generalPurpose
    - maxIO


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet-2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Route

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRoute-1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRoute-2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  DAPSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      # InstanceProfileName: DAPSSSMInstanceProfile
      Path: /
      Roles: 
       - !Ref Ec2InstanceRole

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTPS access to ALB via port 443 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  DAPSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTPS access to DAPS via port 443 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
 

  DAPSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
    - FileSystem
    - SecurityGroupIngress
    Properties:
      LaunchTemplateName: DAPSTemplateName

      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile: 
          Name: !Ref DAPSInstanceProfile
        MetadataOptions:
          HttpTokens: "required"
          HttpPutResponseHopLimit: 2
        SecurityGroupIds:
          - !Ref DAPSSecurityGroup
          - !Ref EfsSecurityGroup
        TagSpecifications:
          - ResourceType: "instance"
            Tags:
            - Key: "Name"
              Value: !Sub ${EnvironmentName}-instance
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 10
              VolumeType: gp2
              Encrypted: true
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            until yum update -y; do echo "Waiting for yum update to run successfully"; sleep 1;done
            echo "Installing EFS utils, git and docker..."
            until yum install -y amazon-efs-utils docker git; do echo "Waiting for installs to complete..."; sleep 1;done
            echo "Packages updated and installed"
            mkdir -p /srv/mvds
            chmod 755 /srv/mvds
            mount -t efs -o tls ${FileSystem}:/ /srv/mvds
            echo "Configuring Docker for this instance"
            usermod -a -G docker ec2-user
            [ $? != 0 ] && echo "Error adding ec2-user to docker group"
            id ec2-user
            # newgrp docker
            service docker start
            systemctl enable docker.service

            echo "Installing Docker Compose"
            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            [ $? != 0 ] && echo "Error downloading docker compose"
            chmod +x /usr/local/bin/docker-compose
            docker-compose version
            
            echo "Waiting random seconds between 1 and 10sec to avoid writing conflicts"
            sleep $(( (RANDOM % 10) + 1 ))
             if [ ! -d /srv/mvds/omejdn-daps ]
            then
              echo "Cloning Git Repository"
              git clone https://github.com/International-Data-Spaces-Association/omejdn-daps /srv/mvds/omejdn-daps
              chmod 755 /srv/mvds/omejdn-daps
              cd /srv/mvds/omejdn-daps
              openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365 -nodes -subj "/C=TN"
              echo "Updating Env variables"
              sed -i "s/development/production/g" .env
              sed -i "s/localhost/${DNSName}/g" .env
              sed -i "s/http/https/g" .env
              sed -i "s/.\/dummy.key/\/srv\/mvds\/omejdn-daps\/key.pem/g" .env
              sed -i "s/.\/dummy.cert/\/srv\/mvds\/omejdn-daps\/cert.pem/g" .env
            fi
            cd /srv/mvds/omejdn-daps
            echo "Run Docker Compose"
            docker-compose up -d
            [ $? != 0 ] && echo "Error running docker compose"

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    Properties:
      MinSize: '2'
      MaxSize: '5'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref DAPSLaunchTemplate
        Version: !GetAtt DAPSLaunchTemplate.LatestVersionNumber
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs: 
        - !Ref ALBTargetGroups

  cpuUsage:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'

  CloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '50'
      AlarmDescription: Alarm if CPU higher than 50%
      Period: '60'
      AlarmActions:
        - !Ref ScalingPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ALBTargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 150
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 120
      Port: 443
      Protocol: HTTPS

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Subnets: 
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true

  ALBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTPS
      Port: 443
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroups
      LoadBalancerArn: !Ref ALB
      SslPolicy: "ELBSecurityPolicy-TLS13-1-2-2021-06"
      Certificates:
        - CertificateArn: !Ref CertificateARN

### DAPS EFS
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance to EFS Mount Access
      VpcId: !Ref VPC

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EfsSecurityGroup
    Properties:
      GroupId: !Ref EfsSecurityGroup
      IpProtocol: "tcp"
      SourceSecurityGroupId: !Ref EfsSecurityGroup
      FromPort: 2049
      ToPort: 2049

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: !Ref PerformanceMode
      Encrypted: true
  MountTarget1:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - FileSystem
    - EfsSecurityGroup
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
      - !Ref EfsSecurityGroup
  MountTarget2:
    Type: AWS::EFS::MountTarget
    DependsOn:
    - FileSystem
    - EfsSecurityGroup
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
      - !Ref EfsSecurityGroup