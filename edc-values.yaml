backendService:
  httpProxyTokenReceiverUrl: {Backend URL}
controlplane:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  businessPartnerValidation:
    log:
      agreementValidation: true
  debug:
    enabled: false
    port: 1044
    suspendOnStart: false
  endpoints:
    control:
      path: /control
      port: 8083
    default:
      path: /api
      port: 8080
    management:
      authKey: {EDC API Key}
      path: /management
      port: 8081
    metrics:
      path: /metrics
      port: 9090
    observability:
      insecure: true
      path: /observability
      port: 8085
    protocol:
      path: /api/v1/dsp
      port: 8084
  env: {}
  envConfigMapNames: []
  envSecretNames: []
  envValueFrom: {}
  image:
    pullPolicy: IfNotPresent
    repository: ""
    tag: ""
  ingresses:
  - annotations: {}
    certManager:
      clusterIssuer: ""
      issuer: ""
    className: ""
    enabled: false
    endpoints:
    - protocol
    hostname: edc-control.{namespace of consumer or provider}
    tls:
      enabled: false
      secretName: ""
  - annotations: {}
    certManager:
      clusterIssuer: ""
      issuer: ""
    className: ""
    enabled: false
    endpoints:
    - management
    - control
    hostname: edc-control.intranet
    tls:
      enabled: false
      secretName: ""
  initContainers: []
  internationalDataSpaces:
    catalogId: TXDC-Catalog
    curator: ""
    description: Tractus-X Eclipse IDS Data Space Connector
    id: TXDC
    maintainer: ""
    title: ""
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  logging: |-
    .level=INFO
    org.eclipse.edc.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
  nodeSelector: {}
  opentelemetry: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsUser: 10001
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      add: []
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 10001
  service:
    annotations: {}
    type: ClusterIP
  tolerations: []
  url:
    ids: ""
    protocol: "http://{name of the Heml Chart}-tractusx-connector-controlplane.{namespace of consumer or provider}:8084"
  volumeMounts: []
  volumes: []
customLabels: {}
daps:
  clientId: {Client Id generated by the DAPS}
  fullnameOverride: daps
  paths:
    jwks: /.well-known/jwks.json
    token: /auth/token
  url: http://{DAPS DNS name}
dataplane:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 100
    minReplicas: 1
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  aws:
    accessKeyId: ""
    endpointOverride: ""
    secretAccessKey: ""
  debug:
    enabled: false
    port: 1044
    suspendOnStart: false
  endpoints:
    control:
      path: /api/dataplane/control
      port: 8083
    default:
      path: /api
      port: 8080
    metrics:
      path: /metrics
      port: 9090
    observability:
      insecure: true
      path: /observability
      port: 8085
    proxy:
      path: /proxy
      port: 8186
    public:
      path: /api/public
      port: 8081
  env: {}
  envConfigMapNames: []
  envSecretNames: []
  envValueFrom: {}
  image:
    pullPolicy: IfNotPresent
    repository: ""
    tag: ""
  ingresses:
  - annotations: {}
    certManager:
      clusterIssuer: ""
      issuer: ""
    className: ""
    enabled: false
    endpoints:
    - public
    hostname: edc-data.{namespace of consumer or provider}
    tls:
      enabled: false
      secretName: ""
  initContainers: []
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  logging: |-
    .level=INFO
    org.eclipse.edc.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
  nodeSelector: {}
  opentelemetry: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsUser: 10001
    seccompProfile:
      type: RuntimeDefault
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      add: []
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 10001
  service:
    port: 80
    type: ClusterIP
  tolerations: []
  url:
    public: http://{Name of the Helm Chart}-tractusx-connector-dataplane.{namespace of consumer or provider}:8081/api/public
  volumeMounts: []
  volumes: []
fullnameOverride: ""
idsdaps:
  connectors:
  - certificate: ""
imagePullSecrets: []
install:
  daps: false
  postgresql: true
  vault: true
nameOverride: ""
participant:
  id: {Client Id generated by the daps}
postgresql:
  auth:
    database: edc
    password: {password of the database}
    username: user
  fullnameOverride: postgresql
  jdbcUrl: jdbc:postgresql://postgresql:5432/edc
  password: {password of the database}
  primary:
    persistence:
      enabled: false
  readReplicas:
    persistence:
      enabled: false
  username: user
serviceAccount:
  annotations: {}
  create: true
  imagePullSecrets: []
  name: ""
vault:
  fullnameOverride: vault
  hashicorp:
    healthCheck:
      enabled: true
      standbyOk: true
    paths:
      health: /v1/sys/health
      secret: /v1/secret
    timeout: 30
    token: {Vault Token}
    url: http://vault:8200
  injector:
    enabled: false
  secretNames:
    transferProxyTokenSignerPrivateKey: transfer-proxy-token-signer-private-key
    transferProxyTokenSignerPublicKey: transfer-proxy-token-signer-public-key
    transferProxyTokenEncryptionAesKey: transfer-proxy-token-encryption-aes-key
    dapsPrivateKey: daps-private-key
    dapsPublicKey: daps-public-key
  server:
    dev:
      devRootToken: {Vault Token}
      enabled: true
    postStart: null
